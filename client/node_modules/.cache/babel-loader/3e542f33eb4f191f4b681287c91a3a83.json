{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAILED, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILED } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  console.log(\"here is the token: \".concat(localStorage.token)); // check for token\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    // make request, res.data return the user\n    const res = await axios.get('/api/c_auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log('To bad');\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/c_users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser()); // Load user asap\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILED\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body.email);\n\n  try {\n    const res = await axios.post('/api/c_auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser()); // Load user asap\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILED\n    });\n  }\n};","map":{"version":3,"sources":["/Users/bloomfieldhuntington/Documents/StuckCoder/stuckcoder2020/stuckcoder_application/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAILED","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILED","setAuthToken","loadUser","dispatch","console","log","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    REGISTER_SUCCESS, \n    REGISTER_FAILED,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAILED\n    } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n\n// Load user\nexport const loadUser = () => async dispatch => {\n    console.log(`here is the token: ${localStorage.token}`);\n    // check for token\n    if(localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n    try {\n        // make request, res.data return the user\n        const res = await axios.get('/api/c_auth')\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n    } catch (err) {\n        console.log('To bad')\n        dispatch({\n            type: AUTH_ERROR\n        })   \n    }\n}\n\n// Register user\nexport const register = ({name, email, password}) => async dispatch => {\n    const config ={\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({name, email, password});\n    try {\n        const res = await axios.post('/api/c_users', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser()); // Load user asap\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n        }\n        dispatch({\n            type: REGISTER_FAILED\n        })\n    }\n}\n\n// Login user\nexport const login = (email, password) => async dispatch => {\n    const config ={\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({email, password});\n    console.log(body.email)\n    try {\n        const res = await axios.post('/api/c_auth', body, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser()); // Load user asap\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n        }\n        dispatch({\n            type: LOGIN_FAILED\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}