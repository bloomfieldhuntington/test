{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAILED, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  // check for token\n  if (localStorage.token) {\n    console.log(\"here is the token:\".concat(localStorage.token));\n    setAuthToken(localStorage.token); // make request, res.data return the user\n  }\n\n  try {\n    const res = await axios.get('/api/c_auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log('To bad');\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/c_users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILED\n    });\n  }\n};","map":{"version":3,"sources":["/Users/bloomfieldhuntington/Documents/StuckCoder/stuckcoder2020/stuckcoder_application/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAILED","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","console","log","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACIC,gBADJ,EAEIC,eAFJ,EAGIC,WAHJ,EAIIC,UAJJ,QAKW,SALX;AAMA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C;AACA,MAAGC,YAAY,CAACC,KAAhB,EAAuB;AACnBC,IAAAA,OAAO,CAACC,GAAR,6BAAiCH,YAAY,CAACC,KAA9C;AACAJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ,CAFmB,CAGnB;AACH;;AACD,MAAI;AACA,UAAMG,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,aAAV,CAAlB;AACAN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEX,WADD;AAELY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACVP,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAJ,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMc,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAD,KAA6B,MAAMd,QAAN,IAAkB;AACnE,QAAMe,MAAM,GAAE;AACVC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADC,GAAd;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAf,CAAb;;AACA,MAAI;AACA,UAAMT,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAN,CAAW,cAAX,EAA2BH,IAA3B,EAAiCF,MAAjC,CAAlB;AACAf,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEb,gBADD;AAELc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAGA,MAAH,EAAW;AACPA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIxB,QAAQ,CAACP,QAAQ,CAAC+B,KAAK,CAACC,GAAP,EAAY,KAAZ,CAAT,CAAhC;AACH;;AACDzB,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEZ;AADD,KAAD,CAAR;AAGH;AACJ,CAtBM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    REGISTER_SUCCESS, \n    REGISTER_FAILED,\n    USER_LOADED,\n    AUTH_ERROR\n    } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load user\nexport const loadUser = () => async dispatch => {\n    // check for token\n    if(localStorage.token) {\n        console.log(`here is the token:${localStorage.token}`);\n        setAuthToken(localStorage.token);\n        // make request, res.data return the user\n    }\n    try {\n        const res = await axios.get('/api/c_auth')\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n    } catch (err) {\n        console.log('To bad')\n        dispatch({\n            type: AUTH_ERROR\n        })   \n    }\n}\n\n// Register user\nexport const register = ({name, email, password}) => async dispatch => {\n    const config ={\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({name, email, password});\n    try {\n        const res = await axios.post('/api/c_users', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n        }\n        dispatch({\n            type: REGISTER_FAILED\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}