{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { S_REGISTER_SUCCESS, S_REGISTER_FAILED, S_USER_LOADED, S_AUTH_ERROR, S_LOGIN_SUCCESS, S_LOGIN_FAILED } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load user\n\nexport const s_loadUser = () => async dispatch => {\n  // check for token\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  } // make request, res.data returns the user\n\n\n  try {\n    const res = await axios.get('./api/s_auth');\n    dispatch({\n      type: S_USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: S_AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/s_users', body, config);\n    dispatch({\n      type: S_REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(s_loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n    }\n\n    dispatch({\n      type: S_REGISTER_FAILED\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/s_auth', body, config);\n    dispatch({\n      type: S_LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(s_loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n    }\n\n    dispatch({\n      type: S_LOGIN_FAILED\n    });\n  }\n};","map":{"version":3,"sources":["/Users/bloomfieldhuntington/Documents/StuckCoder/stuckcoder2020/stuckcoder_application/client/src/actions/s_auth.js"],"names":["axios","setAlert","S_REGISTER_SUCCESS","S_REGISTER_FAILED","S_USER_LOADED","S_AUTH_ERROR","S_LOGIN_SUCCESS","S_LOGIN_FAILED","setAuthToken","s_loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    S_REGISTER_SUCCESS, \n    S_REGISTER_FAILED,\n    S_USER_LOADED,\n    S_AUTH_ERROR,\n    S_LOGIN_SUCCESS,\n    S_LOGIN_FAILED\n    } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load user\nexport const s_loadUser = () => async dispatch => {\n    // check for token\n    if(localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n    // make request, res.data returns the user\n    try {\n        const res = await axios.get('./api/s_auth')\n        dispatch({\n            type: S_USER_LOADED,\n            payload: res.data\n        })\n    } catch (err) {\n        dispatch({\n            type: S_AUTH_ERROR\n        })\n    }\n}\n\n// Register user\nexport const register = ({name, email, password}) => async dispatch => {\n    const config ={\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({name, email, password});\n    try {\n        const res = await axios.post('/api/s_users', body, config);\n        dispatch({\n            type: S_REGISTER_SUCCESS,\n            payload: res.data\n        });\n        dispatch(s_loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n        }\n        dispatch({\n            type: S_REGISTER_FAILED\n        })\n    }\n}\n\n// Login user\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({email, password});\n    try {\n        const res = await axios.post('/api/s_auth', body, config);\n        dispatch({\n            type: S_LOGIN_SUCCESS,\n            payload: res.data\n        });\n        dispatch(s_loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'red')));\n        }\n        dispatch({\n            type: S_LOGIN_FAILED\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}